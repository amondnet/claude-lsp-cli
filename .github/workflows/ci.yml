name: CI/CD

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Install system packages for testing
        run: |
          # Update package list
          sudo apt-get update
          
          # Install commonly available language tools
          sudo apt-get install -y scala default-jdk lua5.3 lua5.3-dev elixir
          
          # Install Rust via rustup (official way)
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          
          # Install Terraform
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get install -y terraform
          
          # Show what's available
          echo "Checking installed system tools:"
          which javac && javac -version || echo "Java not found"
          which rustc && rustc --version || echo "Rust not found" 
          which scalac && scalac -version || echo "Scala not found"
          which lua5.3 && lua5.3 -v || echo "Lua not found"
          which luac && luac -v || echo "Luac not found"
          which elixir && elixir --version || echo "Elixir not found"
          which terraform && terraform --version || echo "Terraform not found"
          
          # Check local tools (installed via bun install)
          echo "Checking local tools:"
          test -f node_modules/.bin/tsc && echo "✅ TypeScript found locally" || echo "❌ TypeScript not found locally"
          test -f node_modules/.bin/pyright && echo "✅ Pyright found locally" || echo "❌ Pyright not found locally"
          
          # All major language tools should now be installed
      
      - name: Build binaries
        run: bun run build
      
      - name: Run tests
        run: |
          # Ensure Rust is available in PATH
          source ~/.cargo/env
          bun test
      
      - name: Test CLI source
        run: bun run src/cli.ts
      
      - name: Test CLI binary
        run: ./bin/claude-lsp-cli
      
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: bin/

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Install system packages for performance testing
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jdk
          
          # Install Rust via rustup
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          
          # Verify tools for performance tests
          which javac && javac -version
          which rustc && rustc --version
          test -f node_modules/.bin/tsc && echo "TypeScript available"
          test -f node_modules/.bin/pyright && echo "Pyright available"
      
      - name: Download baseline (if exists)
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: performance-baseline
          path: .
      
      - name: Create performance baseline (if not exists)
        run: |
          if [ ! -f performance-baseline.json ]; then
            echo "Creating new performance baseline..."
            source ~/.cargo/env
            bun run scripts/performance-monitor.ts --baseline
          else
            echo "Using existing performance baseline"
          fi
      
      - name: Run performance tests
        run: |
          source ~/.cargo/env
          bun run test:performance
      
      - name: Check for performance regressions
        run: |
          source ~/.cargo/env
          bun run scripts/performance-monitor.ts --check
      
      - name: Upload performance baseline
        uses: actions/upload-artifact@v4
        with:
          name: performance-baseline
          path: performance-baseline.json
      
      - name: Upload performance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.md