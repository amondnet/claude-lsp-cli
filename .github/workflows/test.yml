name: Test Suite

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Setup Java
      uses: actions/setup-java@v5
      with:
        distribution: 'temurin'
        java-version: '21'
    
    - name: Setup Elixir
      uses: erlef/setup-elixir@v1.20.4
      with:
        elixir-version: '1.15'
        otp-version: '26'
    
    - name: Setup Lua
      uses: xpol/setup-lua@v0.3
      with:
        lua-version: '5.3'
    
    - name: Setup Scala with Coursier
      uses: coursier/setup-action@v1.3.9
      with:
        apps: bloop
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3.1.2
      with:
        terraform_version: '1.5.0'
    
    - name: Verify installed tools
      run: |
        echo "Checking installed system tools:"
        which go && go version || echo "Go not found"
        which javac && javac -version || echo "Java not found"
        which rustc && rustc --version || echo "Rust not found" 
        which bloop && echo "Bloop found at $(which bloop)" || echo "Bloop not found"
        which lua && lua -v || echo "Lua not found"
        which elixir && elixir --version || echo "Elixir not found"
        echo "Mix location: $(which mix)"
        which mix && mix --version || echo "Mix not found"
        echo "INSTALL_DIR_FOR_ELIXIR: ${INSTALL_DIR_FOR_ELIXIR}"
        ls -la "${INSTALL_DIR_FOR_ELIXIR}/bin/" 2>/dev/null || echo "Elixir bin dir not found"
        which terraform && terraform --version || echo "Terraform not found"
    
    - name: Verify local tools installed
      run: |
        echo "Verifying local tools:"
        test -f node_modules/.bin/tsc && echo "✅ TypeScript found locally" || echo "❌ TypeScript not found locally"
        test -f node_modules/.bin/pyright && echo "✅ Pyright found locally" || echo "❌ Pyright not found locally"
        ls -la node_modules/.bin/ | head -20 || echo "node_modules/.bin not found"
    
    - name: Build binaries
      run: bun run build
      
    - name: Verify binary exists
      run: |
        test -f bin/claude-lsp-cli
        echo "✅ Single unified binary built successfully"
    
    - name: Debug Elixir test
      run: |
        echo "Testing Elixir checker directly:"
        echo "PATH: $PATH"
        echo "Running CLI check on Elixir file:"
        ./bin/claude-lsp-cli check examples/elixir-project/lib/main.ex || true
        echo "Checking if mix.exs exists:"
        ls -la examples/elixir-project/mix.exs
        echo "Trying to run mix compile manually:"
        cd examples/elixir-project && mix compile --warnings-as-errors 2>&1 || true
    
    - name: Run quality checks
      run: |
        echo "Running linting checks..."
        bun run lint
        
        echo "Running format checks..."
        bun run format:check
        
        echo "Running type checks..."
        bun run typecheck
        
        echo "✅ All quality checks passed!"
      
    - name: Run tests
      run: |
        # PATH already includes Rust and Bloop from previous step
        bun test --timeout 30000
      
    - name: Check test coverage
      run: |
        echo "Running coverage analysis..."
        bun run test:coverage
        
        echo "Test files: $(ls tests/*.test.ts | wc -l)"
        echo "Source files: $(ls src/*.ts | wc -l)"
        echo "Coverage: $(($(ls tests/*.test.ts | wc -l) * 100 / $(ls src/*.ts | wc -l)))%"