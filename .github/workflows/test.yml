name: Test Suite

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install
    
    - name: Install system packages for testing
      run: |
        # Update package list
        sudo apt-get update
        
        # Install only essential tools to avoid timeout - focus on Scala/Bloop testing  
        # Skip other languages for now to isolate Bloop issue
        # Force workflow refresh - the CI was running old cached version
        DEBIAN_FRONTEND=noninteractive sudo apt-get install -y default-jdk
        
        # Install Bloop for Scala using modern Coursier method
        # First install Coursier
        curl -fL https://get-coursier.io/coursier-linux > coursier
        chmod +x coursier
        sudo mv coursier /usr/local/bin/
        
        # Install Bloop using Coursier  
        cs install bloop --only-prebuilt=true
        
        # Add Coursier binary directory to PATH
        echo "$HOME/.local/share/coursier/bin" >> $GITHUB_PATH
        export PATH="$HOME/.local/share/coursier/bin:$PATH"
        
        # Skip Rust and Terraform installation for now to focus on Scala/Bloop issue
        
        # Show what's available
        echo "Checking installed system tools:"
        which javac && javac -version || echo "Java not found"
        
        # CRITICAL: Test if Bloop is working before continuing
        echo "Testing Bloop installation:"
        if which bloop > /dev/null 2>&1; then
          echo "✅ Bloop found in PATH"
          if bloop --version; then
            echo "✅ Bloop version command works"
          else
            echo "❌ Bloop version command failed"
            exit 1
          fi
        else
          echo "❌ Bloop not found in PATH - installation failed"
          exit 1
        fi
        
        # TypeScript and pyright will be installed locally via package.json
        echo "Local tools will be installed via 'bun install'"
    
    - name: Verify local tools installed
      run: |
        echo "Verifying local tools:"
        test -f node_modules/.bin/tsc && echo "✅ TypeScript found locally" || echo "❌ TypeScript not found locally"
        test -f node_modules/.bin/pyright && echo "✅ Pyright found locally" || echo "❌ Pyright not found locally"
        ls -la node_modules/.bin/ | head -20 || echo "node_modules/.bin not found"
    
    - name: Build binaries
      run: bun run build
      
    - name: Verify binary exists
      run: |
        test -f bin/claude-lsp-cli
        echo "✅ Single unified binary built successfully"
    
    - name: Run quality checks
      run: |
        echo "Running linting checks..."
        bun run lint
        
        echo "Running format checks..."
        bun run format:check
        
        echo "Running type checks..."
        bun run typecheck
        
        echo "✅ All quality checks passed!"
      
    - name: Run tests
      run: |
        # Debug: Check if Bloop is actually available
        echo "=== Debugging Bloop Setup ==="
        echo "PATH: $PATH"
        echo "Home directory: $HOME"
        ls -la $HOME/.bloop/ || echo ".bloop directory not found in HOME"
        which bloop || echo "Bloop command not found in PATH"
        if which bloop > /dev/null; then
          echo "Bloop version:"
          bloop version || echo "Bloop version failed"
        fi
        echo "Scala project .bloop config:"
        ls -la examples/scala-project/.bloop/ || echo "Scala project .bloop not found"
        echo "=== End Debug ==="
        
        bun test --timeout 30000
      
    - name: Check test coverage
      run: |
        echo "Running coverage analysis..."
        bun run test:coverage
        
        echo "Test files: $(ls tests/*.test.ts | wc -l)"
        echo "Source files: $(ls src/*.ts | wc -l)"
        echo "Coverage: $(($(ls tests/*.test.ts | wc -l) * 100 / $(ls src/*.ts | wc -l)))%"